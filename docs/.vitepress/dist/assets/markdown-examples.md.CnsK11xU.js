import{_ as i,c as l,o as e,a4 as t}from"./chunks/framework.B3ofLeKp.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"markdown-examples.md","filePath":"markdown-examples.md","lastUpdated":1713524058000}'),a={name:"markdown-examples.md"},r=t('<h4 id="项目的创建" tabindex="-1">项目的创建 <a class="header-anchor" href="#项目的创建" aria-label="Permalink to &quot;项目的创建&quot;">​</a></h4><ul><li>Vue 2.0</li><li>VUe 3.0</li></ul><h4 id="vue-2-0" tabindex="-1">Vue 2.0 <a class="header-anchor" href="#vue-2-0" aria-label="Permalink to &quot;Vue 2.0&quot;">​</a></h4><ol><li><p>Cmd执行 node -v 看是否有版本出现 没有或者报错 就去下载安装 Node.js <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="noreferrer">https://nodejs.org/zh-cn/download/</a></p></li><li><p>打开CMD 执行 设置npm 的镜像地址</p><blockquote><ul><li>npm config get registry 查看你 npm 的配置地址 看是否为 <a href="http://registry.npm.taobao.org/" target="_blank" rel="noreferrer">http://registry.npm.taobao.org/</a></li><li>执行 npm config set registry <a href="http://registry.npm.taobao.org/" target="_blank" rel="noreferrer">http://registry.npm.taobao.org/</a> 设置nom 镜像</li></ul></blockquote></li><li><p>全局 安装 脚手架 执行命令 npm install -g vue-cli // -g 代表全局</p></li><li><p>vue -V 查看 版本。 有版本 说明安装脚手架成功</p></li><li><p>vue create 项目名字</p></li><li><p>选择 Manually select features // 意思为手动选择要配置的项目内容</p></li><li><p>选择、</p></li></ol><blockquote><ul><li>Choose Vue version</li><li>Babel（将js的ES5之后的语法转换成ES5,便于浏览器识别语法）</li><li>Router（页面的路由路径管理）</li><li>Vuex （vue的全局状台管理）</li><li>Linter / Formatter （代码格式化的一些配置）</li><li>CSS Pre-processors （CSS 与预处理器）</li></ul></blockquote><ol start="8"><li><ol start="2"><li>x</li></ol></li><li><p><strong>Use history mode for router?</strong> Y (路由模式的选择，一般选择历史模式)</p></li><li><p>Sass/SCSS (with node-sass) (CSS 与预处理器)</p></li><li><p>ESLint + Prettier （使用ESLint官网推荐规则+ Prettile 第三方的配置）</p></li><li><p>Lint on save （保存的时候校验代码格式）</p></li><li><p>In package.json （将配置文件放在这里面）</p></li><li><p>N (不保存之前的配置记录)</p></li></ol><h4 id="git-命令-暂时记住基本的提交命令" tabindex="-1">Git 命令（暂时记住基本的提交命令） <a class="header-anchor" href="#git-命令-暂时记住基本的提交命令" aria-label="Permalink to &quot;Git 命令（暂时记住基本的提交命令）&quot;">​</a></h4><ul><li>git add . （添加到暂存区）</li><li>git commit -m &#39;文件注释&#39; （提交）</li><li>git status (查看提交记录)</li><li>git pull 地址 更新线上的代码</li><li>git push 地址 推送代码</li><li>git config --global user.name &quot;Your Name&quot; // 配置用户名</li><li>git config --global user.email &quot;<a href="mailto:email@example.com" target="_blank" rel="noreferrer">email@example.com</a>&quot; // 配置邮箱</li><li>git init // 初始化 .git 文件 初次上传的时候需要这个</li><li>git log //查看提交历史记录，从最近到最远，可以看到3次</li><li>git reflog //查看每一次修改历史</li><li>git checkout 分支名 // 切换分支</li><li>git branch 分支名。 // 创建分支</li><li>git remote add origin git@github.com.abc/AKgit.git //关联远程仓库</li><li>git push -u origin master //将本地内容推送到远程仓库（第一次） 第一次 先关联在推送</li><li>git remote -v //查看远程仓库信息</li></ul><h6 id="多人协作情况下" tabindex="-1">多人协作情况下 <a class="header-anchor" href="#多人协作情况下" aria-label="Permalink to &quot;多人协作情况下&quot;">​</a></h6><ul><li>git checkout -b dev //创建并切换到分支dev //创建并切换到分支dev，同上</li><li>git branch dev //创建</li><li>git checkout dev //切换 //新版本</li><li>git switch -c dev //创建并切换到分支dev</li><li>git switch master //直接切换分支</li><li>git branch //查看当前分支</li><li>git merge dev （--no-ff）(-m)//合并，把dev分支的工作成果合并到master分支上</li><li>git branch -d dev //删除dev分支</li><li>git stash //将现场储藏起来</li><li>git stash list //查看储存的工作现场 //恢复和删除</li><li>git stash apply</li><li>git stash drop //恢复并删除</li><li>git stash pop</li><li>git cherry-pick 4c805e2 //复制修改</li><li>git push origin master（dev） //推送分支</li><li>git checkout -b dev origin/dev //创建远程origin的dev分支到本地</li><li>git pull //抓取分支（解决冲突）</li><li>git branch --set-upstream-to=origin/dev dev//指定本地与远程dev的链接</li><li>git rebase //把本地未push的分叉提交历史整理成直线</li></ul>',10),o=[r];function s(n,g,p,c,d,h){return e(),l("div",null,o)}const b=i(a,[["render",s]]);export{m as __pageData,b as default};
